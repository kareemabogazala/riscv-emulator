/// ControlLogic.h
#ifndef CONTROL_LOGIC_H
#define CONTROL_LOGIC_H

#include <cstdint>
#include "Utils/DecoderUtils.h"
#include "Utils/ALUOp.h"
/// Control signals generated by the control unit.
/// Enum to select type of immediate
enum class ImmSel : uint8_t
{
    IMM_I, // e.g., addi
    IMM_S, // e.g., sw
    IMM_B, // e.g., beq
    IMM_U, // e.g., lui
    IMM_J  // e.g., jal
};

/// Enum to select what goes to write-back stage
enum class WBSel : uint8_t
{
    WB_ALU = 0, // ALU result
    WB_MEM = 1, // Memory data
    WB_PC4 = 2  // PC + 4
};

enum class ALU_A : bool
{
    RS1 = false,
    PC = true
};

enum class ALU_B : bool
{
    RS2 = false,
    IMM = true
};

enum class MEMRW : bool
{
    READ = false,
    WRITE = true
};

// In ControlSignals.h
struct ControlSignals {
    bool PCSel;
    bool RegWEn;
    MEMRW MemRW;
    bool BrUn;
    bool Branch;
    ALUOp ALUSel;
    ALU_A ASel;
    ALU_B BSel;
    ImmSel ImmSelCode;
    WBSel WBSelCode;
    
    bool CSR;
};
/// Combinational control unit: maps opcode (and funct fields) to control signals.
class ControlLogic
{
public:
    /// Decode instruction fields into control signals.
    /// @param opcode low 7 bits of instruction
    /// @param funct3 bits [14:12]
    /// @param funct7 bits [31:25]
    ControlSignals controlSignals;
    void generate(uint8_t opcode, uint8_t funct3, uint8_t funct7);
};

#endif // CONTROL_LOGIC_H