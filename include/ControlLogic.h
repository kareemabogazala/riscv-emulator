/// ControlLogic.h
#ifndef CONTROL_LOGIC_H
#define CONTROL_LOGIC_H

#include <cstdint>
#include "Utiles/DecoderUtiles.h"
#include "Utiles/ALUOp.h"
/// Control signals generated by the control unit.
struct ControlSignals
{
    bool PCSel;
    bool reg_write;  // write result back to register file
    bool mem_read;   // read from data memory
    bool mem_write;  // write to data memory
    bool branch;     // branch instruction
    bool mem_to_reg; // select memory output for write-back
    ALUOp alu_op;  // ALU operation code
    bool alu_src;    // select immediate vs register for ALU second operand
};

/// Combinational control unit: maps opcode (and funct fields) to control signals.
class ControlLogic
{
public:
    /// Decode instruction fields into control signals.
    /// @param opcode low 7 bits of instruction
    /// @param funct3 bits [14:12]
    /// @param funct7 bits [31:25]
    ControlSignals controlSignals;
    void generate(uint8_t opcode, uint8_t funct3, uint8_t funct7);
};

#endif // CONTROL_LOGIC_H